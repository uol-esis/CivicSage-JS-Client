/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IndexWebsiteRequest from '../model/IndexWebsiteRequest';
import SearchQuery from '../model/SearchQuery';
import SearchResult from '../model/SearchResult';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/DefaultApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * This endpoint provides the specified file as a download. 
     * @param {String} id The identifier for the file to download. 
     * @param {module:api/DefaultApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadFile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFiles operation.
     * @callback module:api/DefaultApi~indexFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index new files
     * This endpoint allows you to index new files by uploading them. 
     * @param {Array.<File>} files 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: String}>} [additionalMetadata] 
     * @param {module:api/DefaultApi~indexFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    indexFiles(files, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling indexFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough'),
        'additionalMetadata': opts['additionalMetadata']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/index/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexWebsite operation.
     * @callback module:api/DefaultApi~indexWebsiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index Website
     * This endpoint allows you to index a website by providing its URL. The service will only index the site the url points to. It will not follow links. 
     * @param {module:model/IndexWebsiteRequest} indexWebsiteRequest 
     * @param {module:api/DefaultApi~indexWebsiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    indexWebsite(indexWebsiteRequest, callback) {
      let postBody = indexWebsiteRequest;
      // verify the required parameter 'indexWebsiteRequest' is set
      if (indexWebsiteRequest === undefined || indexWebsiteRequest === null) {
        throw new Error("Missing the required parameter 'indexWebsiteRequest' when calling indexWebsite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/index/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFiles operation.
     * @callback module:api/DefaultApi~searchFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for files
     * This endpoint allows you to search for indexed files. You can specify the page number and size for pagination. The search query is required in the request body. 
     * @param {module:model/SearchQuery} searchQuery 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageNumber = 0)] Page number
     * @param {Number} [pageSize = 20)] Page size
     * @param {module:api/DefaultApi~searchFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchResult>}
     */
    searchFiles(searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = searchQuery;
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling searchFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SearchResult];
      return this.apiClient.callApi(
        '/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
