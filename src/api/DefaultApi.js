/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Feedback from '../model/Feedback';
import GetAllIndexedSources200Response from '../model/GetAllIndexedSources200Response';
import GetMetadataKeys200Response from '../model/GetMetadataKeys200Response';
import IndexFilesRequestInner from '../model/IndexFilesRequestInner';
import IndexWebsiteRequest from '../model/IndexWebsiteRequest';
import SearchQuery from '../model/SearchQuery';
import SearchResult from '../model/SearchResult';
import SummarizeEmbeddings200Response from '../model/SummarizeEmbeddings200Response';
import SummarizeEmbeddingsRequest from '../model/SummarizeEmbeddingsRequest';
import SystemInfo from '../model/SystemInfo';
import UpdateIndexedWebsiteRequest from '../model/UpdateIndexedWebsiteRequest';
import UploadFile200Response from '../model/UploadFile200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 0.5.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteIndexedSource operation.
     * @callback module:api/DefaultApi~deleteIndexedSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete indexed source
     * This endpoint allows you to delete an indexed source by its ID. The ID can be either a fileId or a websiteId. If deleting a file, the file will be removed from storage. 
     * @param {String} id The identifier for the source to delete. This can be either a fileId or a websiteId. 
     * @param {module:api/DefaultApi~deleteIndexedSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIndexedSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteIndexedSource");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sources', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/DefaultApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * This endpoint provides the specified file as a download. 
     * @param {String} id The identifier for the file to download. 
     * @param {module:api/DefaultApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadFile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllIndexedSources operation.
     * @callback module:api/DefaultApi~getAllIndexedSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllIndexedSources200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all indexed sources
     * This endpoint retrieves a list of all indexed sources, including files and websites. 
     * @param {Object} opts Optional parameters
     * @param {String} [filterExpression] An optional filter expression to filter the indexed sources. This can be used to filter results based on specific criteria. The syntax of the filter expression can be found in the server documentation. 
     * @param {module:api/DefaultApi~getAllIndexedSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllIndexedSources200Response}
     */
    getAllIndexedSources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filterExpression': opts['filterExpression']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllIndexedSources200Response;
      return this.apiClient.callApi(
        '/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataKeys operation.
     * @callback module:api/DefaultApi~getMetadataKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetadataKeys200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata keys
     * This endpoint provides the metadata keys that are supported for searching. This list includes custom keys provided via additional properties. All keys are complete. So there is no need to add `additionalProperties.` for custom keys. 
     * @param {module:api/DefaultApi~getMetadataKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetadataKeys200Response}
     */
    getMetadataKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetadataKeys200Response;
      return this.apiClient.callApi(
        '/system/metadata-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSystemInfo operation.
     * @callback module:api/DefaultApi~getSystemInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system information
     * This endpoint provides information about the system. 
     * @param {module:api/DefaultApi~getSystemInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemInfo}
     */
    getSystemInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemInfo;
      return this.apiClient.callApi(
        '/system/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexFiles operation.
     * @callback module:api/DefaultApi~indexFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index new files
     * This endpoint allows you to index new files by uploading them. 
     * @param {Array.<module:model/IndexFilesRequestInner>} indexFilesRequestInner 
     * @param {module:api/DefaultApi~indexFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    indexFiles(indexFilesRequestInner, callback) {
      let postBody = indexFilesRequestInner;
      // verify the required parameter 'indexFilesRequestInner' is set
      if (indexFilesRequestInner === undefined || indexFilesRequestInner === null) {
        throw new Error("Missing the required parameter 'indexFilesRequestInner' when calling indexFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/index/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the indexWebsite operation.
     * @callback module:api/DefaultApi~indexWebsiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index Website
     * This endpoint allows you to index a website by providing its URL. The service will only index the site the url points to. It will not follow links. 
     * @param {module:model/IndexWebsiteRequest} indexWebsiteRequest 
     * @param {module:api/DefaultApi~indexWebsiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    indexWebsite(indexWebsiteRequest, callback) {
      let postBody = indexWebsiteRequest;
      // verify the required parameter 'indexWebsiteRequest' is set
      if (indexWebsiteRequest === undefined || indexWebsiteRequest === null) {
        throw new Error("Missing the required parameter 'indexWebsiteRequest' when calling indexWebsite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/index/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchFiles operation.
     * @callback module:api/DefaultApi~searchFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for files
     * This endpoint allows you to search for indexed files. You can specify the page number and size for pagination. The search query is required in the request body. 
     * @param {module:model/SearchQuery} searchQuery 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageNumber = 0)] Page number
     * @param {Number} [pageSize = 20)] Page size
     * @param {module:api/DefaultApi~searchFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchResult>}
     */
    searchFiles(searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = searchQuery;
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling searchFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SearchResult];
      return this.apiClient.callApi(
        '/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitFeedback operation.
     * @callback module:api/DefaultApi~submitFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit feedback
     * This endpoint allows you to submit feedback. The feedback can be an arbitrary string. 
     * @param {module:model/Feedback} feedback 
     * @param {module:api/DefaultApi~submitFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitFeedback(feedback, callback) {
      let postBody = feedback;
      // verify the required parameter 'feedback' is set
      if (feedback === undefined || feedback === null) {
        throw new Error("Missing the required parameter 'feedback' when calling submitFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the summarizeEmbeddings operation.
     * @callback module:api/DefaultApi~summarizeEmbeddingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SummarizeEmbeddings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summarize embeddings with a prompt
     * This endpoint allows you to summarize embeddings using a prompt. The prompt is used to generate a summary of the embeddings. 
     * @param {module:model/SummarizeEmbeddingsRequest} summarizeEmbeddingsRequest 
     * @param {module:api/DefaultApi~summarizeEmbeddingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SummarizeEmbeddings200Response}
     */
    summarizeEmbeddings(summarizeEmbeddingsRequest, callback) {
      let postBody = summarizeEmbeddingsRequest;
      // verify the required parameter 'summarizeEmbeddingsRequest' is set
      if (summarizeEmbeddingsRequest === undefined || summarizeEmbeddingsRequest === null) {
        throw new Error("Missing the required parameter 'summarizeEmbeddingsRequest' when calling summarizeEmbeddings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SummarizeEmbeddings200Response;
      return this.apiClient.callApi(
        '/completions/summary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIndexedWebsite operation.
     * @callback module:api/DefaultApi~updateIndexedWebsiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update indexed website
     * This endpoint allows you to update indexed website sources. It requires an array of websiteIds to update the corresponding sources. If the list is empty, all indexed websites will be updated. If the list contains specific websiteIds, only those will be updated. If the list contains a websiteId that does not exist, it will be ignored. 
     * @param {module:model/UpdateIndexedWebsiteRequest} updateIndexedWebsiteRequest 
     * @param {module:api/DefaultApi~updateIndexedWebsiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateIndexedWebsite(updateIndexedWebsiteRequest, callback) {
      let postBody = updateIndexedWebsiteRequest;
      // verify the required parameter 'updateIndexedWebsiteRequest' is set
      if (updateIndexedWebsiteRequest === undefined || updateIndexedWebsiteRequest === null) {
        throw new Error("Missing the required parameter 'updateIndexedWebsiteRequest' when calling updateIndexedWebsite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sources/websites/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/DefaultApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadFile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * This endpoint you to upload a file for indexing. This endpoint will **not** index the file. It is only for uploading files that you want to index later. 
     * @param {File} file 
     * @param {module:api/DefaultApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadFile200Response}
     */
    uploadFile(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadFile200Response;
      return this.apiClient.callApi(
        '/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
