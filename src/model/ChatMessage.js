/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatMessage model module.
 * @module model/ChatMessage
 * @version 0.6.1
 */
class ChatMessage {
    /**
     * Constructs a new <code>ChatMessage</code>.
     * The chat message schema represents a message in a chat session. Each message has a role (user or assistant), content, and can include associated files and website URLs for context. Files have to be uploaded via the &#x60;/files&#x60; endpoint before they can be used in a chat message. 
     * @alias module:model/ChatMessage
     */
    constructor() { 
        
        ChatMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChatMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatMessage} obj Optional instance to populate.
     * @return {module:model/ChatMessage} The populated <code>ChatMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatMessage();

            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], ['String']);
            }
            if (data.hasOwnProperty('websiteURLs')) {
                obj['websiteURLs'] = ApiClient.convertToType(data['websiteURLs'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['files'])) {
            throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['websiteURLs'])) {
            throw new Error("Expected the field `websiteURLs` to be an array in the JSON data but got " + data['websiteURLs']);
        }

        return true;
    }


}



/**
 * The role of the message sender
 * @member {module:model/ChatMessage.RoleEnum} role
 */
ChatMessage.prototype['role'] = undefined;

/**
 * The content of the message
 * @member {String} content
 */
ChatMessage.prototype['content'] = undefined;

/**
 * A list of file IDs that are associated with the message. These files can be used to provide context or additional information in the chat. 
 * @member {Array.<String>} files
 */
ChatMessage.prototype['files'] = undefined;

/**
 * A list of website URLs that are associated with the message. These URLs can be used to provide context or additional information in the chat. 
 * @member {Array.<String>} websiteURLs
 */
ChatMessage.prototype['websiteURLs'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ChatMessage['RoleEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "assistant"
     * @const
     */
    "assistant": "assistant"
};



export default ChatMessage;

