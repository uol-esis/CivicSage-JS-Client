/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatMessage from './ChatMessage';

/**
 * The Chat model module.
 * @module model/Chat
 * @version 0.6.1
 */
class Chat {
    /**
     * Constructs a new <code>Chat</code>.
     * The chat schema represents a chat session, which includes a unique identifier, a list of embeddings, a system prompt, and a list of messages. Each message can contain files and website URLs for context. 
     * @alias module:model/Chat
     */
    constructor() { 
        
        Chat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Chat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Chat} obj Optional instance to populate.
     * @return {module:model/Chat} The populated <code>Chat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Chat();

            if (data.hasOwnProperty('chatId')) {
                obj['chatId'] = ApiClient.convertToType(data['chatId'], 'String');
            }
            if (data.hasOwnProperty('embeddings')) {
                obj['embeddings'] = ApiClient.convertToType(data['embeddings'], ['String']);
            }
            if (data.hasOwnProperty('systemPrompt')) {
                obj['systemPrompt'] = ApiClient.convertToType(data['systemPrompt'], 'String');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [ChatMessage]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Chat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Chat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chatId'] && !(typeof data['chatId'] === 'string' || data['chatId'] instanceof String)) {
            throw new Error("Expected the field `chatId` to be a primitive type in the JSON string but got " + data['chatId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['embeddings'])) {
            throw new Error("Expected the field `embeddings` to be an array in the JSON data but got " + data['embeddings']);
        }
        // ensure the json data is a string
        if (data['systemPrompt'] && !(typeof data['systemPrompt'] === 'string' || data['systemPrompt'] instanceof String)) {
            throw new Error("Expected the field `systemPrompt` to be a primitive type in the JSON string but got " + data['systemPrompt']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                ChatMessage.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The unique identifier for the chat session
 * @member {String} chatId
 */
Chat.prototype['chatId'] = undefined;

/**
 * A list of embedding IDs that are associated with the chat. These embeddings can be used to provide context or additional information in the chat. 
 * @member {Array.<String>} embeddings
 */
Chat.prototype['embeddings'] = undefined;

/**
 * The system prompt for the chat
 * @member {String} systemPrompt
 */
Chat.prototype['systemPrompt'] = undefined;

/**
 * @member {Array.<module:model/ChatMessage>} messages
 */
Chat.prototype['messages'] = undefined;






export default Chat;

