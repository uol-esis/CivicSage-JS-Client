/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SystemInfo model module.
 * @module model/SystemInfo
 * @version 0.4.0
 */
class SystemInfo {
    /**
     * Constructs a new <code>SystemInfo</code>.
     * @alias module:model/SystemInfo
     * @param serverVersion {String} The version of the server
     * @param apiVersion {String} The version of the API implemented by the server
     * @param embeddingContextWindow {Number} The context window size used for embeddings
     * @param chatContextWindow {Number} The context window size used for chat interactions
     * @param maxEmbeddingsInChat {Number} The maximum number of embeddings that can be used in a chat
     * @param supportedFileEndings {Array.<String>} The file endings that are supported for indexing.
     * @param maxFileSize {Number} The maximum file size that can be uploaded for indexing, in megabytes.
     */
    constructor(serverVersion, apiVersion, embeddingContextWindow, chatContextWindow, maxEmbeddingsInChat, supportedFileEndings, maxFileSize) { 
        
        SystemInfo.initialize(this, serverVersion, apiVersion, embeddingContextWindow, chatContextWindow, maxEmbeddingsInChat, supportedFileEndings, maxFileSize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serverVersion, apiVersion, embeddingContextWindow, chatContextWindow, maxEmbeddingsInChat, supportedFileEndings, maxFileSize) { 
        obj['serverVersion'] = serverVersion;
        obj['apiVersion'] = apiVersion;
        obj['embeddingContextWindow'] = embeddingContextWindow;
        obj['chatContextWindow'] = chatContextWindow;
        obj['maxEmbeddingsInChat'] = maxEmbeddingsInChat;
        obj['supportedFileEndings'] = supportedFileEndings;
        obj['maxFileSize'] = maxFileSize;
    }

    /**
     * Constructs a <code>SystemInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SystemInfo} obj Optional instance to populate.
     * @return {module:model/SystemInfo} The populated <code>SystemInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SystemInfo();

            if (data.hasOwnProperty('serverVersion')) {
                obj['serverVersion'] = ApiClient.convertToType(data['serverVersion'], 'String');
            }
            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'String');
            }
            if (data.hasOwnProperty('embeddingContextWindow')) {
                obj['embeddingContextWindow'] = ApiClient.convertToType(data['embeddingContextWindow'], 'Number');
            }
            if (data.hasOwnProperty('chatContextWindow')) {
                obj['chatContextWindow'] = ApiClient.convertToType(data['chatContextWindow'], 'Number');
            }
            if (data.hasOwnProperty('maxEmbeddingsInChat')) {
                obj['maxEmbeddingsInChat'] = ApiClient.convertToType(data['maxEmbeddingsInChat'], 'Number');
            }
            if (data.hasOwnProperty('supportedFileEndings')) {
                obj['supportedFileEndings'] = ApiClient.convertToType(data['supportedFileEndings'], ['String']);
            }
            if (data.hasOwnProperty('maxFileSize')) {
                obj['maxFileSize'] = ApiClient.convertToType(data['maxFileSize'], 'Number');
            }
            if (data.hasOwnProperty('metadataKeys')) {
                obj['metadataKeys'] = ApiClient.convertToType(data['metadataKeys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SystemInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SystemInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SystemInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['serverVersion'] && !(typeof data['serverVersion'] === 'string' || data['serverVersion'] instanceof String)) {
            throw new Error("Expected the field `serverVersion` to be a primitive type in the JSON string but got " + data['serverVersion']);
        }
        // ensure the json data is a string
        if (data['apiVersion'] && !(typeof data['apiVersion'] === 'string' || data['apiVersion'] instanceof String)) {
            throw new Error("Expected the field `apiVersion` to be a primitive type in the JSON string but got " + data['apiVersion']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedFileEndings'])) {
            throw new Error("Expected the field `supportedFileEndings` to be an array in the JSON data but got " + data['supportedFileEndings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metadataKeys'])) {
            throw new Error("Expected the field `metadataKeys` to be an array in the JSON data but got " + data['metadataKeys']);
        }

        return true;
    }


}

SystemInfo.RequiredProperties = ["serverVersion", "apiVersion", "embeddingContextWindow", "chatContextWindow", "maxEmbeddingsInChat", "supportedFileEndings", "maxFileSize"];

/**
 * The version of the server
 * @member {String} serverVersion
 */
SystemInfo.prototype['serverVersion'] = undefined;

/**
 * The version of the API implemented by the server
 * @member {String} apiVersion
 */
SystemInfo.prototype['apiVersion'] = undefined;

/**
 * The context window size used for embeddings
 * @member {Number} embeddingContextWindow
 */
SystemInfo.prototype['embeddingContextWindow'] = undefined;

/**
 * The context window size used for chat interactions
 * @member {Number} chatContextWindow
 */
SystemInfo.prototype['chatContextWindow'] = undefined;

/**
 * The maximum number of embeddings that can be used in a chat
 * @member {Number} maxEmbeddingsInChat
 */
SystemInfo.prototype['maxEmbeddingsInChat'] = undefined;

/**
 * The file endings that are supported for indexing.
 * @member {Array.<String>} supportedFileEndings
 */
SystemInfo.prototype['supportedFileEndings'] = undefined;

/**
 * The maximum file size that can be uploaded for indexing, in megabytes.
 * @member {Number} maxFileSize
 */
SystemInfo.prototype['maxFileSize'] = undefined;

/**
 * The metadata keys that are supported for indexing. These keys can be used to filter search results. Custom properties are not in this list but can be reached via the additional properties key. 
 * @member {Array.<String>} metadataKeys
 */
SystemInfo.prototype['metadataKeys'] = undefined;






export default SystemInfo;

