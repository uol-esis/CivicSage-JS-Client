/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchResult model module.
 * @module model/SearchResult
 * @version 0.0.2
 */
class SearchResult {
    /**
     * Constructs a new <code>SearchResult</code>.
     * @alias module:model/SearchResult
     * @param text {String} The text content of the indexed file or website. This is the embedded text that matched the search query. 
     * @param score {Number} The score of the search result. This is a measure of how well the result matches the search query. Higher scores indicate better matches. The value is between 0 and 1, where 1 is a perfect match. 
     */
    constructor(text, score) { 
        
        SearchResult.initialize(this, text, score);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text, score) { 
        obj['text'] = text;
        obj['score'] = score;
    }

    /**
     * Constructs a <code>SearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchResult} obj Optional instance to populate.
     * @return {module:model/SearchResult} The populated <code>SearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchResult();

            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('fileRef')) {
                obj['fileRef'] = ApiClient.convertToType(data['fileRef'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['fileRef'] && !(typeof data['fileRef'] === 'string' || data['fileRef'] instanceof String)) {
            throw new Error("Expected the field `fileRef` to be a primitive type in the JSON string but got " + data['fileRef']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

SearchResult.RequiredProperties = ["text", "score"];

/**
 * The name of the file that was indexed. If this is present, it means the result is from a file. 
 * @member {String} fileName
 */
SearchResult.prototype['fileName'] = undefined;

/**
 * The reference to the file that was indexed. If this is present, it means the result is from a file. 
 * @member {String} fileRef
 */
SearchResult.prototype['fileRef'] = undefined;

/**
 * The URL of the website that was indexed. If this is present, it means the result is from a website. 
 * @member {String} url
 */
SearchResult.prototype['url'] = undefined;

/**
 * The text content of the indexed file or website. This is the embedded text that matched the search query. 
 * @member {String} text
 */
SearchResult.prototype['text'] = undefined;

/**
 * The score of the search result. This is a measure of how well the result matches the search query. Higher scores indicate better matches. The value is between 0 and 1, where 1 is a perfect match. 
 * @member {Number} score
 */
SearchResult.prototype['score'] = undefined;






export default SearchResult;

