/**
 * CivicSage
 * CivicSage is a service that allows you to index files and websites. 
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchQuery model module.
 * @module model/SearchQuery
 * @version 0.5.0
 */
class SearchQuery {
    /**
     * Constructs a new <code>SearchQuery</code>.
     * @alias module:model/SearchQuery
     * @param query {String} The search query to find indexed files
     */
    constructor(query) { 
        
        SearchQuery.initialize(this, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query) { 
        obj['query'] = query;
    }

    /**
     * Constructs a <code>SearchQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchQuery} obj Optional instance to populate.
     * @return {module:model/SearchQuery} The populated <code>SearchQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchQuery();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('filterExpression')) {
                obj['filterExpression'] = ApiClient.convertToType(data['filterExpression'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['filterExpression'] && !(typeof data['filterExpression'] === 'string' || data['filterExpression'] instanceof String)) {
            throw new Error("Expected the field `filterExpression` to be a primitive type in the JSON string but got " + data['filterExpression']);
        }

        return true;
    }


}

SearchQuery.RequiredProperties = ["query"];

/**
 * The search query to find indexed files
 * @member {String} query
 */
SearchQuery.prototype['query'] = undefined;

/**
 * An optional filter expression to filter the search results. This can be used to filter results based on specific criteria. The syntax of the filter expression can be found in the server documentation. 
 * @member {String} filterExpression
 */
SearchQuery.prototype['filterExpression'] = undefined;






export default SearchQuery;

